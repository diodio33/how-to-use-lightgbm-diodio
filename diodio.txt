# 必要なライブラリのインポート
import pandas as pd
import numpy as np
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import roc_auc_score, f1_score
import lightgbm as lgb
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import make_scorer

# データの読み込み（仮のデータフレーム）
df = pd.read_csv('titanic.csv')  # データの読み込み例

# カテゴリ変数のエンコーディングと欠損値の処理
# 必要な列のみ選択
target = 'survived'
features = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked', 'adult_male', 'alone']
X = df[features]
y = df[target]

# 前処理パイプラインの構築
categorical_features = X.select_dtypes(include=['object', 'bool']).columns.tolist()
numerical_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()

# カテゴリ変数はOneHotエンコーディング、数値変数は平均値で欠損埋め
preprocessor = ColumnTransformer(
    transformers=[
        ('num', SimpleImputer(strategy='mean'), numerical_features),
        ('cat', Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='most_frequent')),
            ('encoder', OneHotEncoder(drop='first'))
        ]), categorical_features)
    ])

# クロスバリデーションの設定
kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# 評価指標の初期化
auc_scores = []
f1_scores = []

# クロスバリデーションでの学習と評価
for train_index, test_index in kf.split(X, y):
    # トレーニングデータとテストデータの分割
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]
    
    # 前処理パイプラインの適用
    X_train = preprocessor.fit_transform(X_train)
    X_test = preprocessor.transform(X_test)
    
    # LightGBMデータセットの作成
    lgb_train = lgb.Dataset(X_train, y_train)
    
    # モデルのハイパーパラメータ
    params = {
        'objective': 'binary',
        'metric': 'auc',
        'boosting_type': 'gbdt',
        'learning_rate': 0.1,
        'num_leaves': 31,
        'random_state': 42
    }
    
    # モデルの学習
    model = lgb.train(params, lgb_train, num_boost_round=100)
    
    # 予測
    y_pred_prob = model.predict(X_test)
    y_pred = (y_pred_prob >= 0.5).astype(int)
    
    # 評価指標の計算
    auc = roc_auc_score(y_test, y_pred_prob)
    f1 = f1_score(y_test, y_pred)
    
    auc_scores.append(auc)
    f1_scores.append(f1)

# 評価指標の平均値
print(f'平均 AUC: {np.mean(auc_scores):.4f}')
print(f'平均 F1スコア: {np.mean(f1_scores):.4f}')
